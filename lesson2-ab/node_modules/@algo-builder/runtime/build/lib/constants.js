"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetParamMapIndex = exports.AssetParamGetField = exports.AssetParamMap = exports.TxFieldDefaults = exports.ITxArrFields = exports.TxArrFields = exports.ITxnFields = exports.TxnFields = exports.ZERO_ADDRESS_STR = exports.ZERO_ADDRESS = exports.BlockFinalisationTime = exports.MaxTxnLife = exports.MAX_OUTPUT_BYTE_LEN = exports.MAX_INPUT_BYTE_LEN = exports.MAX_LOCAL_SCHEMA_ENTRIES = exports.MAX_GLOBAL_SCHEMA_ENTRIES = exports.seedLength = exports.proofLength = exports.publicKeyLength = exports.ALGORAND_MAX_LOGS_LENGTH = exports.ALGORAND_MAX_LOGS_COUNT = exports.MAX_INNER_TRANSACTIONS = exports.ALGORAND_MAX_TX_ARRAY_LEN = exports.ALGORAND_MAX_TX_ACCOUNTS_LEN = exports.ALGORAND_MAX_APP_ARGS_LEN = exports.MaxTxnNoteBytes = exports.MaxExtraAppProgramPages = exports.MaxAppProgramLen = exports.LogicSigMaxSize = exports.MAX_APP_PROGRAM_COST = exports.LOGIC_SIG_MAX_COST = exports.MAX_KEY_VAL_BYTES = exports.MAX_KEY_BYTES = exports.SSC_VALUE_BYTES = exports.SSC_VALUE_UINT = exports.ASSET_CREATION_FEE = exports.APPLICATION_BASE_FEE = exports.MinVersionSupportC2CCall = exports.MaxTEALVersion = exports.ALGORAND_ACCOUNT_MIN_BALANCE = exports.maxStringSize = exports.ALGORAND_MIN_TX_FEE = exports.MAX_CONCAT_SIZE = exports.DEFAULT_STACK_ELEM = exports.MAX_UINT6 = exports.MIN_UINT8 = exports.MAX_UINT8 = exports.MAX_UINT128 = exports.MAX_UINT64 = exports.MIN_UINT64 = void 0;
exports.NETWORK_DEFAULT = exports.TS_CONFIG_FILENAME = exports.JS_CONFIG_FILENAME = exports.NumIndex = exports.CurveTypeIndex = exports.CurveTypeArgument = exports.CurveTypeEnum = exports.Base64Encoding = exports.TxnFieldsIndex = exports.TxFieldEnum = exports.AcctParamQueryFieldsIndex = exports.AccountParamGetField = exports.AssetHoldingField = exports.OpCodeField = exports.GlobalFieldsIndex = exports.GlobalField = exports.vrfVerifyFieldTypes = exports.blockFieldIndex = exports.blockFieldTypes = exports.json_refTypes = exports.TransactionTypeEnum = exports.OpGasCost = exports.GlobalFields = exports.reBase32 = exports.reBase64Url = exports.reBase64 = exports.reOct = exports.reHex = exports.reDec = exports.reDigit = exports.AcctParamQueryFields = exports.AppParamDefined = exports.TxnaField = exports.TxnRefFields = exports.AppParamDefinedIndex = exports.AppParamField = void 0;
const lodash_clonedeep_1 = __importDefault(require("lodash.clonedeep"));
exports.MIN_UINT64 = 0n;
exports.MAX_UINT64 = 0xffffffffffffffffn;
exports.MAX_UINT128 = 340282366920938463463374607431768211455n;
exports.MAX_UINT8 = 255;
exports.MIN_UINT8 = 0;
exports.MAX_UINT6 = 63n;
exports.DEFAULT_STACK_ELEM = 0n;
exports.MAX_CONCAT_SIZE = 4096;
exports.ALGORAND_MIN_TX_FEE = 1000;
exports.maxStringSize = 4096;
// https://github.com/algorand/go-algorand/blob/master/config/consensus.go#L659
exports.ALGORAND_ACCOUNT_MIN_BALANCE = 0.1e6; // 0.1 ALGO
exports.MaxTEALVersion = 8;
exports.MinVersionSupportC2CCall = 6;
// values taken from: https://developer.algorand.org/docs/features/asc1/stateful/#minimum-balance-requirement-for-a-smart-contract
// minimum balance costs (in microalgos) for app schema
exports.APPLICATION_BASE_FEE = 0.1e6; // base fee for creating or opt-in to application
exports.ASSET_CREATION_FEE = 0.1e6; // creation fee for asset
exports.SSC_VALUE_UINT = 28500; // cost for value as uint64
exports.SSC_VALUE_BYTES = 50000; // cost for value as bytes
exports.MAX_KEY_BYTES = 64; // max length of key
exports.MAX_KEY_VAL_BYTES = 128; // max combined length of key-value pair
// values taken from [https://github.com/algorand/go-algorand/blob/master/config/consensus.go#L691]
exports.LOGIC_SIG_MAX_COST = 20000;
exports.MAX_APP_PROGRAM_COST = 700;
exports.LogicSigMaxSize = 1000;
exports.MaxAppProgramLen = 2048;
exports.MaxExtraAppProgramPages = 3;
exports.MaxTxnNoteBytes = 1024;
exports.ALGORAND_MAX_APP_ARGS_LEN = 16;
exports.ALGORAND_MAX_TX_ACCOUNTS_LEN = 4;
// the assets and application arrays combined and totaled with the accounts array can not exceed 8
exports.ALGORAND_MAX_TX_ARRAY_LEN = 8;
exports.MAX_INNER_TRANSACTIONS = 16;
exports.ALGORAND_MAX_LOGS_COUNT = 32;
exports.ALGORAND_MAX_LOGS_LENGTH = 1024;
exports.publicKeyLength = 32;
exports.proofLength = 80;
exports.seedLength = 32;
//smart contract constraints
// https://developer.algorand.org/docs/get-details/parameter_tables/
exports.MAX_GLOBAL_SCHEMA_ENTRIES = 64;
exports.MAX_LOCAL_SCHEMA_ENTRIES = 16;
// for byteslice arithmetic ops, inputs are limited to 64 bytes,
// but ouput can be upto 128 bytes (eg. when using b+ OR b*)
// https://github.com/algorand/go-algorand/blob/bd5a00092c8a63dba8314b97851e46ff247cf7c1/data/transactions/logic/eval.go#L1302
exports.MAX_INPUT_BYTE_LEN = 64;
exports.MAX_OUTPUT_BYTE_LEN = 128;
exports.MaxTxnLife = 1000;
exports.BlockFinalisationTime = 4n; // block finalisation time in seconds truncated down
exports.ZERO_ADDRESS = new Uint8Array(32);
exports.ZERO_ADDRESS_STR = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
const zeroUint64 = 0n;
const zeroByte = new Uint8Array(0);
// https://developer.algorand.org/docs/reference/teal/opcodes/#txn
// transaction fields supported by teal v1
exports.TxnFields = {
    1: {
        Sender: "snd",
        Fee: "fee",
        FirstValid: "fv",
        LastValid: "lv",
        Note: "note",
        Lease: "lx",
        Receiver: "rcv",
        Amount: "amt",
        CloseRemainderTo: "close",
        VotePK: "votekey",
        SelectionPK: "selkey",
        VoteFirst: "votefst",
        VoteLast: "votelst",
        VoteKeyDilution: "votekd",
        Type: "type",
        TypeEnum: null,
        XferAsset: "xaid",
        AssetAmount: "aamt",
        AssetSender: "asnd",
        AssetReceiver: "arcv",
        AssetCloseTo: "aclose",
        GroupIndex: null,
        TxID: null,
    },
};
// transaction fields supported by teal v2
exports.TxnFields[2] = {
    ...exports.TxnFields[1],
    ApplicationID: "apid",
    OnCompletion: "apan",
    ApplicationArgs: "apaa",
    NumAppArgs: null,
    Accounts: "apat",
    NumAccounts: null,
    ApprovalProgram: "apap",
    ClearStateProgram: "apsu",
    RekeyTo: "rekey",
    ConfigAsset: "caid",
    ConfigAssetTotal: "t",
    ConfigAssetDecimals: "dc",
    ConfigAssetDefaultFrozen: "df",
    ConfigAssetUnitName: "un",
    ConfigAssetName: "an",
    ConfigAssetURL: "au",
    ConfigAssetMetadataHash: "am",
    ConfigAssetManager: "m",
    ConfigAssetReserve: "r",
    ConfigAssetFreeze: "f",
    ConfigAssetClawback: "c",
    FreezeAsset: "faid",
    FreezeAssetAccount: "fadd",
    FreezeAssetFrozen: "afrz",
};
exports.TxnFields[3] = {
    ...exports.TxnFields[2],
    Assets: "apas",
    NumAssets: null,
    Applications: "apfa",
    NumApplications: null,
    GlobalNumUint: "nui",
    GlobalNumByteSlice: "nbs",
    LocalNumUint: "nui",
    LocalNumByteSlice: "nbs",
};
exports.TxnFields[4] = {
    ...exports.TxnFields[3],
    ExtraProgramPages: "apep",
};
exports.TxnFields[5] = {
    ...exports.TxnFields[4],
    CreatedAssetID: null,
    CreatedApplicationID: null,
    Nonparticipation: "nonpart",
};
exports.TxnFields[6] = {
    ...exports.TxnFields[5],
    LastLog: null,
    StateProofPK: null,
};
exports.TxnFields[7] = {
    ...exports.TxnFields[6],
    ApprovalProgramPages: null,
    ClearStateProgramPages: null,
    NumApprovalProgramPages: null,
    NumClearStateProgramPages: null,
    FirstValidTime: null,
};
exports.TxnFields[8] = (0, lodash_clonedeep_1.default)(exports.TxnFields[7]);
exports.ITxnFields = {
    1: {},
    2: {},
    3: {},
    4: {},
    5: {
        Logs: null,
        NumLogs: null,
        CreatedAssetID: null,
        CreatedApplicationID: null,
    },
};
exports.ITxnFields[6] = {
    ...exports.ITxnFields[5],
};
exports.ITxnFields[7] = {
    ...exports.ITxnFields[6],
};
exports.ITxnFields[8] = {
    ...exports.ITxnFields[7],
};
// transaction fields of type array
exports.TxArrFields = {
    1: new Set(),
    2: new Set(["Accounts", "ApplicationArgs"]),
};
exports.TxArrFields[3] = new Set([...exports.TxArrFields[2], "Assets", "Applications"]);
exports.TxArrFields[4] = (0, lodash_clonedeep_1.default)(exports.TxArrFields[3]);
exports.TxArrFields[5] = new Set([...exports.TxArrFields[4], "Logs"]);
exports.TxArrFields[6] = (0, lodash_clonedeep_1.default)(exports.TxArrFields[5]);
exports.TxArrFields[7] = new Set([...exports.TxArrFields[6], "ApprovalProgramPages", "ClearStateProgramPages"]);
exports.TxArrFields[8] = (0, lodash_clonedeep_1.default)(exports.TxArrFields[7]);
// itxn fields of type array
exports.ITxArrFields = {
    1: new Set(),
    2: new Set(),
    3: new Set(),
    4: new Set(),
    5: new Set(["Logs"]),
};
exports.ITxArrFields[6] = (0, lodash_clonedeep_1.default)(exports.ITxArrFields[5]);
exports.ITxArrFields[7] = (0, lodash_clonedeep_1.default)(exports.ITxArrFields[6]);
exports.ITxArrFields[8] = (0, lodash_clonedeep_1.default)(exports.ITxArrFields[7]);
exports.TxFieldDefaults = {
    Sender: exports.ZERO_ADDRESS,
    Fee: zeroUint64,
    FirstValid: zeroUint64,
    LastValid: zeroUint64,
    Note: zeroByte,
    Lease: zeroByte,
    Receiver: exports.ZERO_ADDRESS,
    Amount: zeroUint64,
    CloseRemainderTo: exports.ZERO_ADDRESS,
    VotePK: exports.ZERO_ADDRESS,
    SelectionPK: exports.ZERO_ADDRESS,
    VoteFirst: zeroUint64,
    VoteLast: zeroUint64,
    VoteKeyDilution: zeroUint64,
    Type: zeroByte,
    TypeEnum: zeroUint64,
    XferAsset: zeroUint64,
    AssetAmount: zeroUint64,
    AssetSender: exports.ZERO_ADDRESS,
    AssetReceiver: exports.ZERO_ADDRESS,
    AssetCloseTo: exports.ZERO_ADDRESS,
    GroupIndex: zeroUint64,
    ApplicationID: zeroUint64,
    OnCompletion: zeroUint64,
    ApplicationArgs: zeroByte,
    NumAppArgs: zeroUint64,
    Accounts: zeroByte,
    NumAccounts: zeroUint64,
    ApprovalProgram: zeroByte,
    ClearStateProgram: zeroByte,
    RekeyTo: exports.ZERO_ADDRESS,
    ConfigAsset: zeroUint64,
    ConfigAssetTotal: zeroUint64,
    ConfigAssetDecimals: zeroUint64,
    ConfigAssetDefaultFrozen: zeroUint64,
    ConfigAssetUnitName: zeroByte,
    ConfigAssetName: zeroByte,
    ConfigAssetURL: zeroByte,
    ConfigAssetMetadataHash: zeroByte,
    ConfigAssetManager: exports.ZERO_ADDRESS,
    ConfigAssetReserve: exports.ZERO_ADDRESS,
    ConfigAssetFreeze: exports.ZERO_ADDRESS,
    ConfigAssetClawback: exports.ZERO_ADDRESS,
    FreezeAsset: zeroUint64,
    FreezeAssetAccount: exports.ZERO_ADDRESS,
    FreezeAssetFrozen: zeroUint64,
    Assets: zeroByte,
    NumAssets: zeroUint64,
    Applications: zeroByte,
    NumApplications: zeroUint64,
    GlobalNumUint: zeroUint64,
    GlobalNumByteSlice: zeroUint64,
    LocalNumUint: zeroUint64,
    LocalNumByteSlice: zeroUint64,
    ExtraProgramPages: zeroUint64,
    Nonparticipation: zeroUint64,
};
exports.AssetParamMap = {
    1: {
        AssetTotal: "total",
        AssetDecimals: "decimals",
        AssetDefaultFrozen: "defaultFrozen",
        AssetUnitName: "unitName",
        AssetName: "name",
        AssetURL: "url",
        AssetMetadataHash: "metadataHash",
        AssetManager: "manager",
        AssetReserve: "reserve",
        AssetFreeze: "freeze",
        AssetClawback: "clawback", // Clawback address
    },
};
exports.AssetParamMap[2] = { ...exports.AssetParamMap[1] };
exports.AssetParamMap[3] = { ...exports.AssetParamMap[2] };
exports.AssetParamMap[4] = { ...exports.AssetParamMap[3] };
exports.AssetParamMap[5] = {
    ...exports.AssetParamMap[4],
    AssetCreator: "creator",
};
exports.AssetParamMap[6] = { ...exports.AssetParamMap[5] };
exports.AssetParamMap[7] = { ...exports.AssetParamMap[6] };
exports.AssetParamMap[8] = { ...exports.AssetParamMap[7] };
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/?from_query=opcode#asset_params_get-f
var AssetParamGetField;
(function (AssetParamGetField) {
    AssetParamGetField["AssetTotal"] = "AssetTotal";
    AssetParamGetField["AssetDecimals"] = "AssetDecimals";
    AssetParamGetField["AssetDefaultFrozen"] = "AssetDefaultFrozen";
    AssetParamGetField["AssetUnitName"] = "AssetUnitName";
    AssetParamGetField["AssetName"] = "AssetName";
    AssetParamGetField["AssetURL"] = "AssetURL";
    AssetParamGetField["AssetMetadataHash"] = "AssetMetadataHash";
    AssetParamGetField["AssetManager"] = "AssetManager";
    AssetParamGetField["AssetReserve"] = "AssetReserve";
    AssetParamGetField["AssetFreeze"] = "AssetFreeze";
    AssetParamGetField["AssetClawback"] = "AssetClawback";
    AssetParamGetField["AssetCreator"] = "AssetCreator";
})(AssetParamGetField = exports.AssetParamGetField || (exports.AssetParamGetField = {}));
exports.AssetParamMapIndex = [
    AssetParamGetField.AssetTotal,
    AssetParamGetField.AssetDecimals,
    AssetParamGetField.AssetDefaultFrozen,
    AssetParamGetField.AssetUnitName,
    AssetParamGetField.AssetName,
    AssetParamGetField.AssetURL,
    AssetParamGetField.AssetMetadataHash,
    AssetParamGetField.AssetManager,
    AssetParamGetField.AssetReserve,
    AssetParamGetField.AssetFreeze,
    AssetParamGetField.AssetClawback,
    AssetParamGetField.AssetCreator,
];
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/?from_query=opcode#app_params_get-f
var AppParamField;
(function (AppParamField) {
    AppParamField["AppApprovalProgram"] = "AppApprovalProgram";
    AppParamField["AppClearStateProgram"] = "AppClearStateProgram";
    AppParamField["AppGlobalNumUint"] = "AppGlobalNumUint";
    AppParamField["AppGlobalNumByteSlice"] = "AppGlobalNumByteSlice";
    AppParamField["AppLocalNumUint"] = "AppLocalNumUint";
    AppParamField["AppLocalNumByteSlice"] = "AppLocalNumByteSlice";
    AppParamField["AppExtraProgramPages"] = "AppExtraProgramPages";
    AppParamField["AppCreator"] = "AppCreator";
    AppParamField["AppAddress"] = "AppAddress";
})(AppParamField = exports.AppParamField || (exports.AppParamField = {}));
exports.AppParamDefinedIndex = [
    AppParamField.AppApprovalProgram,
    AppParamField.AppClearStateProgram,
    AppParamField.AppGlobalNumUint,
    AppParamField.AppGlobalNumByteSlice,
    AppParamField.AppLocalNumUint,
    AppParamField.AppLocalNumByteSlice,
    AppParamField.AppExtraProgramPages,
    AppParamField.AppCreator,
    AppParamField.AppAddress,
];
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/?from_query=opcode#app_params_get-f
var TxnRefFields;
(function (TxnRefFields) {
    TxnRefFields["ApplicationArgs"] = "ApplicationArgs";
    TxnRefFields["ConfigAssetTotal"] = "ConfigAssetTotal";
    TxnRefFields["ConfigAssetDecimals"] = "ConfigAssetDecimals";
    TxnRefFields["ConfigAssetDefaultFrozen"] = "ConfigAssetDefaultFrozen";
    TxnRefFields["ConfigAssetUnitName"] = "ConfigAssetUnitName";
    TxnRefFields["ConfigAssetName"] = "ConfigAssetName";
    TxnRefFields["ConfigAssetURL"] = "ConfigAssetURL";
    TxnRefFields["ConfigAssetMetadataHash"] = "ConfigAssetMetadataHash";
    TxnRefFields["ConfigAssetManager"] = "ConfigAssetManager";
    TxnRefFields["ConfigAssetReserve"] = "ConfigAssetReserve";
    TxnRefFields["ConfigAssetFreeze"] = "ConfigAssetFreeze";
    TxnRefFields["ConfigAssetClawback"] = "ConfigAssetClawback";
    TxnRefFields["CreatedAssetID"] = "CreatedAssetID";
    TxnRefFields["CreatedApplicationID"] = "CreatedApplicationID";
    TxnRefFields["FirstValidTime"] = "FirstValidTime";
    TxnRefFields["FreezeAssetAccount"] = "FreezeAssetAccount";
    TxnRefFields["FreezeAssetFrozen"] = "FreezeAssetFrozen";
    TxnRefFields["Global"] = "Global";
    TxnRefFields["GlobalNumUint"] = "GlobalNumUint";
    TxnRefFields["GroupIndex"] = "GroupIndex";
    TxnRefFields["GlobalNumByteSlice"] = "GlobalNumByteSlice";
    TxnRefFields["LocalNumByteSlice"] = "LocalNumByteSlice";
    TxnRefFields["LocalNumUint"] = "LocalNumUint";
    TxnRefFields["NumAppArgs"] = "NumAppArgs";
    TxnRefFields["NumAccounts"] = "NumAccounts";
    TxnRefFields["NumAssets"] = "NumAssets";
    TxnRefFields["NumApplications"] = "NumApplications";
    TxnRefFields["NumApprovalProgramPages"] = "NumApprovalProgramPages";
    TxnRefFields["NumClearStateProgramPages"] = "NumClearStateProgramPages";
    TxnRefFields["NumLogs"] = "NumLogs";
    TxnRefFields["OnCompletion"] = "OnCompletion";
    TxnRefFields["TxID"] = "TxID";
})(TxnRefFields = exports.TxnRefFields || (exports.TxnRefFields = {}));
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/?from_query=opcode#txna-f-i
var TxnaField;
(function (TxnaField) {
    TxnaField["Accounts"] = "Accounts";
    TxnaField["ApprovalProgramPages"] = "ApprovalProgramPages";
    TxnaField["Applications"] = "Applications";
    TxnaField["ApplicationArgs"] = "ApplicationArgs";
    TxnaField["Assets"] = "Assets";
    TxnaField["ClearStateProgramPages"] = "ClearStateProgramPages";
    TxnaField["Logs"] = "Logs";
})(TxnaField = exports.TxnaField || (exports.TxnaField = {}));
// app param use for app_params_get opcode
exports.AppParamDefined = {
    1: new Set(),
    2: new Set(),
    3: new Set(),
    4: new Set(),
    5: new Set([
        AppParamField.AppApprovalProgram,
        AppParamField.AppClearStateProgram,
        AppParamField.AppGlobalNumUint,
        AppParamField.AppGlobalNumByteSlice,
        AppParamField.AppLocalNumUint,
        AppParamField.AppLocalNumByteSlice,
        AppParamField.AppExtraProgramPages,
        AppParamField.AppCreator,
        AppParamField.AppAddress,
    ]),
};
exports.AppParamDefined[6] = (0, lodash_clonedeep_1.default)(exports.AppParamDefined[5]);
exports.AppParamDefined[7] = (0, lodash_clonedeep_1.default)(exports.AppParamDefined[6]);
exports.AppParamDefined[8] = (0, lodash_clonedeep_1.default)(exports.AppParamDefined[7]);
// param use for query acct_params_get opcode
exports.AcctParamQueryFields = {
    AcctBalance: { version: 6 },
    AcctMinBalance: { version: 6 },
    AcctAuthAddr: { version: 6 },
};
exports.reDigit = /^\d+$/;
exports.reDec = /^(0|[1-9]\d*)$/;
exports.reHex = /^0x[0-9a-fA-F]+$/;
exports.reOct = /^0[0-8]+$/;
/** is Base64 regex
 * ^                          # Start of input
 * ([0-9a-zA-Z+/]{4})*        # Groups of 4 valid characters decode
 *                            # to 24 bits of data for each group
 * (                          # Either ending with:
 *     ([0-9a-zA-Z+/]{2}==)   # two valid characters followed by ==
 *     |                      # , or
 *     ([0-9a-zA-Z+/]{3}=)    # three valid characters followed by =
 * )?                         # , or nothing
 * $                          # End of input
 */
exports.reBase64 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
/** is Base64Url regex
 * ^                          # Start of input
 * ([0-9a-zA-Z_-]{4})*        # Groups of 4 valid characters decode
 *                            # to 24 bits of data for each group
 * (                          # Either ending with:
 *     ([0-9a-zA-Z_-]{2}==)   # two valid characters followed by ==
 *     |                      # , or
 *     ([0-9a-zA-Z_-]{3}=)    # three valid characters followed by =
 * )?                         # , or nothing
 * $                          # End of input
 */
exports.reBase64Url = /^([0-9a-zA-Z_-]{4})*(([0-9a-zA-Z_-]{2}==)|([0-9a-zA-Z_-]{3}=))?$/;
// A-Z and 2-7 repeated, with optional `=` at the end
exports.reBase32 = /^[A-Z2-7]+=*$/;
// reference for values: https://github.com/algorand/go-algorand/blob/master/config/consensus.go#L510
// for fields: https://developer.algorand.org/docs/reference/teal/opcodes/#global
// global field supported by teal v1
exports.GlobalFields = {
    // teal version => global field => value
    1: {
        MinTxnFee: exports.ALGORAND_MIN_TX_FEE,
        MinBalance: 10000,
        MaxTxnLife: exports.MaxTxnLife,
        ZeroAddress: exports.ZERO_ADDRESS,
        GroupSize: null,
    },
};
// global field supported by teal v2
// Note: Round, LatestTimestamp are dummy values and these are overrided by runtime class's
// round and timestamp
exports.GlobalFields[2] = {
    ...exports.GlobalFields[1],
    LogicSigVersion: exports.MaxTEALVersion,
    Round: 1,
    LatestTimestamp: 1,
    CurrentApplicationID: null,
};
// global fields supported by tealv3
exports.GlobalFields[3] = {
    ...exports.GlobalFields[2],
    CreatorAddress: null,
};
// global fields supported by tealv4
exports.GlobalFields[4] = {
    ...exports.GlobalFields[3],
};
// global fields supported by tealv5
exports.GlobalFields[5] = {
    ...exports.GlobalFields[4],
    GroupID: null,
    CurrentApplicationAddress: null,
};
// global fields supported in tealv6
exports.GlobalFields[6] = {
    ...exports.GlobalFields[5],
    OpcodeBudget: 0,
    CallerApplicationID: null,
    CallerApplicationAddress: null,
};
exports.GlobalFields[7] = {
    ...exports.GlobalFields[6],
};
exports.GlobalFields[8] = {
    ...exports.GlobalFields[7],
};
// creating map for opcodes whose cost is other than 1
exports.OpGasCost = {
    // version => opcode => cost
    // v1 opcodes cost
    1: {
        sha256: 7,
        sha512_256: 9,
        keccak256: 26,
        ed25519verify: 1900,
    },
};
// v2 opcodes cost
exports.OpGasCost[2] = {
    ...exports.OpGasCost[1],
    sha256: 35,
    sha512_256: 45,
    keccak256: 130,
};
/**
 * In tealv3, cost of crypto opcodes are same as v2.
 * All other opcodes have cost 1
 */
exports.OpGasCost[3] = { ...exports.OpGasCost[2] };
/*
 * tealv4
 */
exports.OpGasCost[4] = {
    ...exports.OpGasCost[3],
    "b+": 10,
    "b-": 10,
    "b*": 20,
    "b/": 20,
    "b%": 20,
    "b|": 6,
    "b&": 6,
    "b^": 6,
    "b~": 4,
};
/**
 * teal v5
 */
exports.OpGasCost[5] = {
    ...exports.OpGasCost[4],
    ecdsa_verify: 1700,
    ecdsa_pk_decompress: 650,
    ecdsa_pk_recover: 2000,
};
exports.OpGasCost[6] = {
    ...exports.OpGasCost[5],
    bsqrt: 40,
};
exports.OpGasCost[7] = {
    ...exports.OpGasCost[6],
    sha3_256: 130,
    ed25519verify_bare: 1900,
    ecdsa_verify: 2500,
    ecdsa_pk_decompress: 2400,
    vrf_verify: 5700,
};
exports.OpGasCost[8] = {
    ...exports.OpGasCost[7],
};
/**
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/specification/#typeenum-constants
 */
var TransactionTypeEnum;
(function (TransactionTypeEnum) {
    TransactionTypeEnum["UNKNOWN"] = "unknown";
    TransactionTypeEnum["PAYMENT"] = "pay";
    TransactionTypeEnum["KEY_REGISTRATION"] = "keyreg";
    TransactionTypeEnum["ASSET_CONFIG"] = "acfg";
    TransactionTypeEnum["ASSET_TRANSFER"] = "axfer";
    TransactionTypeEnum["ASSET_FREEZE"] = "afrz";
    TransactionTypeEnum["APPLICATION_CALL"] = "appl";
})(TransactionTypeEnum = exports.TransactionTypeEnum || (exports.TransactionTypeEnum = {}));
exports.json_refTypes = {
    JSONString: "JSONString",
    JSONUint64: "JSONUint64",
    JSONObject: "JSONObject",
};
var blockFieldTypes;
(function (blockFieldTypes) {
    blockFieldTypes["BlkTimestamp"] = "BlkTimestamp";
    blockFieldTypes["BlkSeed"] = "BlkSeed";
})(blockFieldTypes = exports.blockFieldTypes || (exports.blockFieldTypes = {}));
exports.blockFieldIndex = [blockFieldTypes.BlkSeed, blockFieldTypes.BlkTimestamp];
var vrfVerifyFieldTypes;
(function (vrfVerifyFieldTypes) {
    vrfVerifyFieldTypes["VrfAlgorand"] = "VrfAlgorand";
    vrfVerifyFieldTypes["VrfStandard"] = "VrfStandard";
})(vrfVerifyFieldTypes = exports.vrfVerifyFieldTypes || (exports.vrfVerifyFieldTypes = {}));
// CallerApplicationAddress
var GlobalField;
(function (GlobalField) {
    GlobalField["CallerApplicationAddress"] = "CallerApplicationAddress";
    GlobalField["CallerApplicationID"] = "CallerApplicationID";
    GlobalField["CurrentApplicationAddress"] = "CurrentApplicationAddress";
    GlobalField["CreatorAddress"] = "CreatorAddress";
    GlobalField["CurrentApplicationID"] = "CurrentApplicationID";
    GlobalField["GroupSize"] = "GroupSize";
    GlobalField["GroupID"] = "GroupID";
    GlobalField["LatestTimestamp"] = "LatestTimestamp";
    GlobalField["LogicSigVersion"] = "LogicSigVersion";
    GlobalField["MaxTxnLife"] = "MaxTxnLife";
    GlobalField["MinTxnFee"] = "MinTxnFee";
    GlobalField["MinBalance"] = "MinBalance";
    GlobalField["OpcodeBudget"] = "OpcodeBudget";
    GlobalField["Round"] = "Round";
    GlobalField["ZeroAddress"] = "ZeroAddress";
})(GlobalField = exports.GlobalField || (exports.GlobalField = {}));
exports.GlobalFieldsIndex = [
    GlobalField.MinTxnFee,
    GlobalField.MinBalance,
    GlobalField.MaxTxnLife,
    GlobalField.ZeroAddress,
    GlobalField.GroupSize,
    GlobalField.LogicSigVersion,
    GlobalField.Round,
    GlobalField.LatestTimestamp,
    GlobalField.CurrentApplicationID,
    GlobalField.CreatorAddress,
    GlobalField.CurrentApplicationAddress,
    GlobalField.GroupID,
    GlobalField.OpcodeBudget,
    GlobalField.CallerApplicationID,
    GlobalField.CallerApplicationAddress,
];
var OpCodeField;
(function (OpCodeField) {
    OpCodeField["AcctBalance"] = "AcctBalance";
    OpCodeField["Amount"] = "Amount";
    OpCodeField["CloseRemainderTo"] = "CloseRemainderTo";
    OpCodeField["Fee"] = "Fee";
    OpCodeField["FirstValid"] = "FirstValid";
    OpCodeField["FirstValidTime"] = "FirstValidTime";
    OpCodeField["LastValid"] = "LastValid";
    OpCodeField["Lease"] = "Lease";
    OpCodeField["Note"] = "Note";
    OpCodeField["Receiver"] = "Receiver";
    OpCodeField["Sender"] = "Sender";
    OpCodeField["VotePK"] = "VotePK";
})(OpCodeField = exports.OpCodeField || (exports.OpCodeField = {}));
var AssetHoldingField;
(function (AssetHoldingField) {
    AssetHoldingField["AssetBalance"] = "AssetBalance";
    AssetHoldingField["AssetFrozen"] = "AssetFrozen";
})(AssetHoldingField = exports.AssetHoldingField || (exports.AssetHoldingField = {}));
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/?from_query=opcode#acct_params_get-f
var AccountParamGetField;
(function (AccountParamGetField) {
    AccountParamGetField["AcctAuthAddr"] = "AcctAuthAddr";
    AccountParamGetField["AcctBalance"] = "AcctBalance";
    AccountParamGetField["AcctMinBalance"] = "AcctMinBalance";
})(AccountParamGetField = exports.AccountParamGetField || (exports.AccountParamGetField = {}));
exports.AcctParamQueryFieldsIndex = [
    AccountParamGetField.AcctBalance,
    AccountParamGetField.AcctMinBalance,
    AccountParamGetField.AcctAuthAddr,
];
// https://developer.algorand.org/docs/get-details/transactions/transactions/#common-fields-header-and-type
var TxFieldEnum;
(function (TxFieldEnum) {
    TxFieldEnum["Amount"] = "Amount";
    TxFieldEnum["Accounts"] = "Accounts";
    TxFieldEnum["ApplicationID"] = "ApplicationID";
    TxFieldEnum["ApprovalProgram"] = "ApprovalProgram";
    TxFieldEnum["AppArguments"] = "App Arguments";
    TxFieldEnum["AssetAmount"] = "AssetAmount";
    TxFieldEnum["AssetSender"] = "AssetSender";
    TxFieldEnum["AssetReceiver"] = "AssetReceiver";
    TxFieldEnum["AssetCloseTo"] = "AssetCloseTo";
    TxFieldEnum["AssetName"] = "AssetName";
    TxFieldEnum["AssetParams"] = "AssetParams";
    TxFieldEnum["AssetFrozen"] = "AssetFrozen";
    TxFieldEnum["ClawbackAddr"] = "ClawbackAddr";
    TxFieldEnum["ClearStateProgram"] = "ClearStateProgram";
    TxFieldEnum["CloseRemainderTo"] = "CloseRemainderTo";
    TxFieldEnum["ConfigAsset"] = "ConfigAsset";
    TxFieldEnum["FreezeAccount"] = "FreezeAccount";
    TxFieldEnum["Decimals"] = "Decimals";
    TxFieldEnum["DefaultFrozen"] = "DefaultFrozen";
    TxFieldEnum["ExtraProgramPages"] = "ExtraProgramPages";
    TxFieldEnum["Fee"] = "Fee";
    TxFieldEnum["FreezeAddr"] = "FreezeAddr";
    TxFieldEnum["FreezeAsset"] = "FreezeAsset";
    TxFieldEnum["ForeignAssets"] = "ForeignAssets";
    TxFieldEnum["FirstValid"] = "FirstValid";
    TxFieldEnum["ForeignApps"] = "ForeignApps";
    TxFieldEnum["GenesisHash"] = "GenesisHash";
    TxFieldEnum["GlobalStateSchema"] = "GlobalStateSchema";
    TxFieldEnum["Group"] = "Group";
    TxFieldEnum["LastLog"] = "LastLog";
    TxFieldEnum["Lease"] = "Lease";
    TxFieldEnum["LastValid"] = "LastValid";
    TxFieldEnum["LogicSig"] = "LogicSig";
    TxFieldEnum["LocalStateSchema"] = "LocalStateSchema";
    TxFieldEnum["ManagerAddr"] = "ManagerAddr";
    TxFieldEnum["MetaDataHash"] = "MetaDataHash";
    TxFieldEnum["Msig"] = "Msig";
    TxFieldEnum["Note"] = "Note";
    TxFieldEnum["Nonparticipation"] = "Nonparticipation";
    TxFieldEnum["NumberByteSlices"] = "NumberByteSlices";
    TxFieldEnum["NumberInts"] = "NumberInts";
    TxFieldEnum["OnComplete"] = "OnComplete";
    TxFieldEnum["OpcodeBudget"] = "OpcodeBudget";
    TxFieldEnum["RekeyTo"] = "RekeyTo";
    TxFieldEnum["Receiver"] = "Receiver";
    TxFieldEnum["ReserveAddr"] = "ReserveAddr";
    TxFieldEnum["SelectionPK"] = "SelectionPK";
    TxFieldEnum["StateProofPK"] = "StateProofPK";
    TxFieldEnum["Sender"] = "Sender";
    TxFieldEnum["Sig"] = "Sig";
    TxFieldEnum["Total"] = "Total";
    TxFieldEnum["Transaction"] = "Transaction";
    TxFieldEnum["TypeEnum"] = "TypeEnum";
    TxFieldEnum["Type"] = "Type";
    TxFieldEnum["TxType"] = "TxType";
    TxFieldEnum["UnitName"] = "UnitName";
    TxFieldEnum["URL"] = "URL";
    TxFieldEnum["VotePK"] = "VotePK";
    TxFieldEnum["VoteFirst"] = "VoteFirst";
    TxFieldEnum["VoteLast"] = "VoteLast";
    TxFieldEnum["VoteKeyDilution"] = "VoteKeyDilution";
    TxFieldEnum["XferAsset"] = "XferAsset";
})(TxFieldEnum = exports.TxFieldEnum || (exports.TxFieldEnum = {}));
exports.TxnFieldsIndex = [
    TxFieldEnum.Sender,
    TxFieldEnum.Fee,
    TxFieldEnum.FirstValid,
    TxnRefFields.FirstValidTime,
    TxFieldEnum.LastValid,
    TxFieldEnum.Note,
    TxFieldEnum.Lease,
    TxFieldEnum.Receiver,
    TxFieldEnum.Amount,
    TxFieldEnum.CloseRemainderTo,
    TxFieldEnum.VotePK,
    TxFieldEnum.SelectionPK,
    TxFieldEnum.VoteFirst,
    TxFieldEnum.VoteLast,
    TxFieldEnum.VoteKeyDilution,
    TxFieldEnum.Type,
    TxFieldEnum.TypeEnum,
    TxFieldEnum.XferAsset,
    TxFieldEnum.AssetAmount,
    TxFieldEnum.AssetSender,
    TxFieldEnum.AssetReceiver,
    TxFieldEnum.AssetCloseTo,
    TxnRefFields.GroupIndex,
    TxnRefFields.TxID,
    TxFieldEnum.ApplicationID,
    TxnRefFields.OnCompletion,
    TxnRefFields.ApplicationArgs,
    TxnRefFields.NumAppArgs,
    TxFieldEnum.Accounts,
    TxnRefFields.NumAccounts,
    TxFieldEnum.ApprovalProgram,
    TxFieldEnum.ClearStateProgram,
    TxFieldEnum.RekeyTo,
    TxFieldEnum.ConfigAsset,
    TxnRefFields.ConfigAssetTotal,
    TxnRefFields.ConfigAssetDecimals,
    TxnRefFields.ConfigAssetDefaultFrozen,
    TxnRefFields.ConfigAssetUnitName,
    TxnRefFields.ConfigAssetName,
    TxnRefFields.ConfigAssetURL,
    TxnRefFields.ConfigAssetMetadataHash,
    TxnRefFields.ConfigAssetManager,
    TxnRefFields.ConfigAssetReserve,
    TxnRefFields.ConfigAssetFreeze,
    TxnRefFields.ConfigAssetClawback,
    TxFieldEnum.FreezeAsset,
    TxnRefFields.FreezeAssetAccount,
    TxnRefFields.FreezeAssetFrozen,
    TxnaField.Assets,
    TxnRefFields.NumAssets,
    TxnaField.Applications,
    TxnRefFields.NumApplications,
    TxnRefFields.GlobalNumUint,
    TxnRefFields.GlobalNumByteSlice,
    TxnRefFields.LocalNumUint,
    TxnRefFields.LocalNumByteSlice,
    TxFieldEnum.ExtraProgramPages,
    TxFieldEnum.Nonparticipation,
    TxnaField.Logs,
    TxnRefFields.NumLogs,
    TxnRefFields.CreatedAssetID,
    TxnRefFields.CreatedApplicationID,
    TxFieldEnum.LastLog,
    TxFieldEnum.StateProofPK,
    TxnaField.ApprovalProgramPages,
    TxnRefFields.NumApprovalProgramPages,
    TxnaField.ClearStateProgramPages,
    TxnRefFields.NumClearStateProgramPages,
];
// https://developer.algorand.org/docs/get-details/dapps/avm/teal/opcodes/?from_query=opcode#base64_decode-e
var Base64Encoding;
(function (Base64Encoding) {
    Base64Encoding["StdEncoding"] = "StdEncoding";
    Base64Encoding["URLEncoding"] = "URLEncoding";
})(Base64Encoding = exports.Base64Encoding || (exports.Base64Encoding = {}));
var CurveTypeEnum;
(function (CurveTypeEnum) {
    CurveTypeEnum["secp256k1"] = "secp256k1";
    CurveTypeEnum["secp256r1"] = "p256";
})(CurveTypeEnum = exports.CurveTypeEnum || (exports.CurveTypeEnum = {}));
var CurveTypeArgument;
(function (CurveTypeArgument) {
    CurveTypeArgument["secp256k1"] = "Secp256k1";
    CurveTypeArgument["secp256r1"] = "Secp256r1";
})(CurveTypeArgument = exports.CurveTypeArgument || (exports.CurveTypeArgument = {}));
exports.CurveTypeIndex = [CurveTypeArgument.secp256k1, CurveTypeArgument.secp256r1];
var NumIndex;
(function (NumIndex) {
    NumIndex["index_0"] = "0";
    NumIndex["index_1"] = "1";
    NumIndex["index_2"] = "2";
})(NumIndex = exports.NumIndex || (exports.NumIndex = {}));
exports.JS_CONFIG_FILENAME = "algob.config.js";
exports.TS_CONFIG_FILENAME = "algob.config.ts";
exports.NETWORK_DEFAULT = "default";
//# sourceMappingURL=constants.js.map
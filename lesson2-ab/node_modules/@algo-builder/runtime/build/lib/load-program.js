"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProgram = void 0;
const fs_1 = __importDefault(require("fs"));
const files_1 = require("./files");
const pycompile_op_1 = require("./pycompile-op");
/**
 * returns program TEAL code.
 * @param fileName filename in /assets. Must end with .teal OR .py
 * @param assetPath path to directory that include filename
 * @param scInitParam smart contract template parameters, used to set hardcoded values
 * in .py or .teal smart contract.
 * @param logs only show logs on console when set as true. By default this value is true
 */
function getProgram(fileName, assetPath = "assets", scInitParam, logs = true) {
    const assetpath = assetPath === "" ? "assets" : assetPath;
    const filePath = (0, files_1.getPathFromDirRecursive)(assetpath, fileName);
    const program = fs_1.default.readFileSync(filePath, "utf8");
    if (!fileName.endsWith(pycompile_op_1.pyExt) && !fileName.endsWith(pycompile_op_1.tealExt)) {
        throw new Error(`filename "${fileName}" must end with "${pycompile_op_1.tealExt}" or "${pycompile_op_1.pyExt}"`);
    }
    const pyOp = new pycompile_op_1.PyCompileOp();
    if (fileName.endsWith(pycompile_op_1.pyExt)) {
        return pyOp.ensurePyTEALCompiled(fileName, scInitParam, logs);
    }
    else {
        // teal
        const [replaceParams] = pyOp.parseScTmplParam(scInitParam, logs);
        return pyOp.replaceTempValues(program, replaceParams);
    }
}
exports.getProgram = getProgram;
//# sourceMappingURL=load-program.js.map
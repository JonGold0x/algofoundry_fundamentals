import { EncodedAssetParams, EncodedLocalStateSchema, EncodedTransaction } from "algosdk";
export declare const MIN_UINT64 = 0n;
export declare const MAX_UINT64 = 18446744073709551615n;
export declare const MAX_UINT128 = 340282366920938463463374607431768211455n;
export declare const MAX_UINT8 = 255;
export declare const MIN_UINT8 = 0;
export declare const MAX_UINT6 = 63n;
export declare const DEFAULT_STACK_ELEM = 0n;
export declare const MAX_CONCAT_SIZE = 4096;
export declare const ALGORAND_MIN_TX_FEE = 1000;
export declare const maxStringSize = 4096;
export declare const ALGORAND_ACCOUNT_MIN_BALANCE = 100000;
export declare const MaxTEALVersion = 8;
export declare const MinVersionSupportC2CCall = 6;
export declare const APPLICATION_BASE_FEE = 100000;
export declare const ASSET_CREATION_FEE = 100000;
export declare const SSC_VALUE_UINT = 28500;
export declare const SSC_VALUE_BYTES = 50000;
export declare const MAX_KEY_BYTES = 64;
export declare const MAX_KEY_VAL_BYTES = 128;
export declare const LOGIC_SIG_MAX_COST = 20000;
export declare const MAX_APP_PROGRAM_COST = 700;
export declare const LogicSigMaxSize = 1000;
export declare const MaxAppProgramLen = 2048;
export declare const MaxExtraAppProgramPages = 3;
export declare const MaxTxnNoteBytes = 1024;
export declare const ALGORAND_MAX_APP_ARGS_LEN = 16;
export declare const ALGORAND_MAX_TX_ACCOUNTS_LEN = 4;
export declare const ALGORAND_MAX_TX_ARRAY_LEN = 8;
export declare const MAX_INNER_TRANSACTIONS = 16;
export declare const ALGORAND_MAX_LOGS_COUNT = 32;
export declare const ALGORAND_MAX_LOGS_LENGTH = 1024;
export declare const publicKeyLength = 32;
export declare const proofLength = 80;
export declare const seedLength = 32;
export declare const MAX_GLOBAL_SCHEMA_ENTRIES = 64;
export declare const MAX_LOCAL_SCHEMA_ENTRIES = 16;
export declare const MAX_INPUT_BYTE_LEN = 64;
export declare const MAX_OUTPUT_BYTE_LEN = 128;
export declare const MaxTxnLife = 1000;
export declare const BlockFinalisationTime = 4n;
export declare const ZERO_ADDRESS: Uint8Array;
export declare const ZERO_ADDRESS_STR = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
declare type keyOfEncTx = keyof EncodedTransaction | keyof EncodedAssetParams | keyof EncodedLocalStateSchema;
export declare const TxnFields: {
    [key: number]: {
        [key: string]: keyOfEncTx | null;
    };
};
export declare const ITxnFields: {
    [key: number]: {
        [key: string]: keyOfEncTx | null;
    };
};
export declare const TxArrFields: {
    [key: number]: Set<string>;
};
export declare const ITxArrFields: {
    [key: number]: Set<string>;
};
export declare const TxFieldDefaults: {
    [key: string]: any;
};
export declare const AssetParamMap: {
    [key: number]: {
        [key: string]: string;
    };
};
export declare enum AssetParamGetField {
    AssetTotal = "AssetTotal",
    AssetDecimals = "AssetDecimals",
    AssetDefaultFrozen = "AssetDefaultFrozen",
    AssetUnitName = "AssetUnitName",
    AssetName = "AssetName",
    AssetURL = "AssetURL",
    AssetMetadataHash = "AssetMetadataHash",
    AssetManager = "AssetManager",
    AssetReserve = "AssetReserve",
    AssetFreeze = "AssetFreeze",
    AssetClawback = "AssetClawback",
    AssetCreator = "AssetCreator"
}
export declare const AssetParamMapIndex: AssetParamGetField[];
export declare enum AppParamField {
    AppApprovalProgram = "AppApprovalProgram",
    AppClearStateProgram = "AppClearStateProgram",
    AppGlobalNumUint = "AppGlobalNumUint",
    AppGlobalNumByteSlice = "AppGlobalNumByteSlice",
    AppLocalNumUint = "AppLocalNumUint",
    AppLocalNumByteSlice = "AppLocalNumByteSlice",
    AppExtraProgramPages = "AppExtraProgramPages",
    AppCreator = "AppCreator",
    AppAddress = "AppAddress"
}
export declare const AppParamDefinedIndex: AppParamField[];
export declare enum TxnRefFields {
    ApplicationArgs = "ApplicationArgs",
    ConfigAssetTotal = "ConfigAssetTotal",
    ConfigAssetDecimals = "ConfigAssetDecimals",
    ConfigAssetDefaultFrozen = "ConfigAssetDefaultFrozen",
    ConfigAssetUnitName = "ConfigAssetUnitName",
    ConfigAssetName = "ConfigAssetName",
    ConfigAssetURL = "ConfigAssetURL",
    ConfigAssetMetadataHash = "ConfigAssetMetadataHash",
    ConfigAssetManager = "ConfigAssetManager",
    ConfigAssetReserve = "ConfigAssetReserve",
    ConfigAssetFreeze = "ConfigAssetFreeze",
    ConfigAssetClawback = "ConfigAssetClawback",
    CreatedAssetID = "CreatedAssetID",
    CreatedApplicationID = "CreatedApplicationID",
    FirstValidTime = "FirstValidTime",
    FreezeAssetAccount = "FreezeAssetAccount",
    FreezeAssetFrozen = "FreezeAssetFrozen",
    Global = "Global",
    GlobalNumUint = "GlobalNumUint",
    GroupIndex = "GroupIndex",
    GlobalNumByteSlice = "GlobalNumByteSlice",
    LocalNumByteSlice = "LocalNumByteSlice",
    LocalNumUint = "LocalNumUint",
    NumAppArgs = "NumAppArgs",
    NumAccounts = "NumAccounts",
    NumAssets = "NumAssets",
    NumApplications = "NumApplications",
    NumApprovalProgramPages = "NumApprovalProgramPages",
    NumClearStateProgramPages = "NumClearStateProgramPages",
    NumLogs = "NumLogs",
    OnCompletion = "OnCompletion",
    TxID = "TxID"
}
export declare enum TxnaField {
    Accounts = "Accounts",
    ApprovalProgramPages = "ApprovalProgramPages",
    Applications = "Applications",
    ApplicationArgs = "ApplicationArgs",
    Assets = "Assets",
    ClearStateProgramPages = "ClearStateProgramPages",
    Logs = "Logs"
}
export declare const AppParamDefined: {
    [key: number]: Set<string>;
};
export declare const AcctParamQueryFields: {
    [key: string]: {
        version: number;
    };
};
export declare const reDigit: RegExp;
export declare const reDec: RegExp;
export declare const reHex: RegExp;
export declare const reOct: RegExp;
/** is Base64 regex
 * ^                          # Start of input
 * ([0-9a-zA-Z+/]{4})*        # Groups of 4 valid characters decode
 *                            # to 24 bits of data for each group
 * (                          # Either ending with:
 *     ([0-9a-zA-Z+/]{2}==)   # two valid characters followed by ==
 *     |                      # , or
 *     ([0-9a-zA-Z+/]{3}=)    # three valid characters followed by =
 * )?                         # , or nothing
 * $                          # End of input
 */
export declare const reBase64: RegExp;
/** is Base64Url regex
 * ^                          # Start of input
 * ([0-9a-zA-Z_-]{4})*        # Groups of 4 valid characters decode
 *                            # to 24 bits of data for each group
 * (                          # Either ending with:
 *     ([0-9a-zA-Z_-]{2}==)   # two valid characters followed by ==
 *     |                      # , or
 *     ([0-9a-zA-Z_-]{3}=)    # three valid characters followed by =
 * )?                         # , or nothing
 * $                          # End of input
 */
export declare const reBase64Url: RegExp;
export declare const reBase32: RegExp;
export declare const GlobalFields: {
    [key: number]: {
        [key: string]: any;
    };
};
export declare const OpGasCost: {
    [key: number]: {
        [key: string]: number;
    };
};
export declare const enum MathOp {
    Add = 0,
    Sub = 1,
    Mul = 2,
    Div = 3,
    Mod = 4,
    LessThan = 5,
    GreaterThan = 6,
    LessThanEqualTo = 7,
    GreaterThanEqualTo = 8,
    EqualTo = 9,
    NotEqualTo = 10,
    BitwiseOr = 11,
    BitwiseAnd = 12,
    BitwiseXor = 13,
    BitwiseInvert = 14
}
/**
 * https://developer.algorand.org/docs/get-details/dapps/avm/teal/specification/#typeenum-constants
 */
export declare enum TransactionTypeEnum {
    UNKNOWN = "unknown",
    PAYMENT = "pay",
    KEY_REGISTRATION = "keyreg",
    ASSET_CONFIG = "acfg",
    ASSET_TRANSFER = "axfer",
    ASSET_FREEZE = "afrz",
    APPLICATION_CALL = "appl"
}
export declare const json_refTypes: {
    JSONString: string;
    JSONUint64: string;
    JSONObject: string;
};
export declare enum blockFieldTypes {
    BlkTimestamp = "BlkTimestamp",
    BlkSeed = "BlkSeed"
}
export declare const blockFieldIndex: blockFieldTypes[];
export declare enum vrfVerifyFieldTypes {
    VrfAlgorand = "VrfAlgorand",
    VrfStandard = "VrfStandard"
}
export declare enum GlobalField {
    CallerApplicationAddress = "CallerApplicationAddress",
    CallerApplicationID = "CallerApplicationID",
    CurrentApplicationAddress = "CurrentApplicationAddress",
    CreatorAddress = "CreatorAddress",
    CurrentApplicationID = "CurrentApplicationID",
    GroupSize = "GroupSize",
    GroupID = "GroupID",
    LatestTimestamp = "LatestTimestamp",
    LogicSigVersion = "LogicSigVersion",
    MaxTxnLife = "MaxTxnLife",
    MinTxnFee = "MinTxnFee",
    MinBalance = "MinBalance",
    OpcodeBudget = "OpcodeBudget",
    Round = "Round",
    ZeroAddress = "ZeroAddress"
}
export declare const GlobalFieldsIndex: GlobalField[];
export declare enum OpCodeField {
    AcctBalance = "AcctBalance",
    Amount = "Amount",
    CloseRemainderTo = "CloseRemainderTo",
    Fee = "Fee",
    FirstValid = "FirstValid",
    FirstValidTime = "FirstValidTime",
    LastValid = "LastValid",
    Lease = "Lease",
    Note = "Note",
    Receiver = "Receiver",
    Sender = "Sender",
    VotePK = "VotePK"
}
export declare enum AssetHoldingField {
    AssetBalance = "AssetBalance",
    AssetFrozen = "AssetFrozen"
}
export declare enum AccountParamGetField {
    AcctAuthAddr = "AcctAuthAddr",
    AcctBalance = "AcctBalance",
    AcctMinBalance = "AcctMinBalance"
}
export declare const AcctParamQueryFieldsIndex: AccountParamGetField[];
export declare enum TxFieldEnum {
    Amount = "Amount",
    Accounts = "Accounts",
    ApplicationID = "ApplicationID",
    ApprovalProgram = "ApprovalProgram",
    AppArguments = "App Arguments",
    AssetAmount = "AssetAmount",
    AssetSender = "AssetSender",
    AssetReceiver = "AssetReceiver",
    AssetCloseTo = "AssetCloseTo",
    AssetName = "AssetName",
    AssetParams = "AssetParams",
    AssetFrozen = "AssetFrozen",
    ClawbackAddr = "ClawbackAddr",
    ClearStateProgram = "ClearStateProgram",
    CloseRemainderTo = "CloseRemainderTo",
    ConfigAsset = "ConfigAsset",
    FreezeAccount = "FreezeAccount",
    Decimals = "Decimals",
    DefaultFrozen = "DefaultFrozen",
    ExtraProgramPages = "ExtraProgramPages",
    Fee = "Fee",
    FreezeAddr = "FreezeAddr",
    FreezeAsset = "FreezeAsset",
    ForeignAssets = "ForeignAssets",
    FirstValid = "FirstValid",
    ForeignApps = "ForeignApps",
    GenesisHash = "GenesisHash",
    GlobalStateSchema = "GlobalStateSchema",
    Group = "Group",
    LastLog = "LastLog",
    Lease = "Lease",
    LastValid = "LastValid",
    LogicSig = "LogicSig",
    LocalStateSchema = "LocalStateSchema",
    ManagerAddr = "ManagerAddr",
    MetaDataHash = "MetaDataHash",
    Msig = "Msig",
    Note = "Note",
    Nonparticipation = "Nonparticipation",
    NumberByteSlices = "NumberByteSlices",
    NumberInts = "NumberInts",
    OnComplete = "OnComplete",
    OpcodeBudget = "OpcodeBudget",
    RekeyTo = "RekeyTo",
    Receiver = "Receiver",
    ReserveAddr = "ReserveAddr",
    SelectionPK = "SelectionPK",
    StateProofPK = "StateProofPK",
    Sender = "Sender",
    Sig = "Sig",
    Total = "Total",
    Transaction = "Transaction",
    TypeEnum = "TypeEnum",
    Type = "Type",
    TxType = "TxType",
    UnitName = "UnitName",
    URL = "URL",
    VotePK = "VotePK",
    VoteFirst = "VoteFirst",
    VoteLast = "VoteLast",
    VoteKeyDilution = "VoteKeyDilution",
    XferAsset = "XferAsset"
}
export declare const TxnFieldsIndex: (TxFieldEnum | TxnRefFields | TxnaField)[];
export declare enum Base64Encoding {
    StdEncoding = "StdEncoding",
    URLEncoding = "URLEncoding"
}
export declare enum CurveTypeEnum {
    secp256k1 = "secp256k1",
    secp256r1 = "p256"
}
export declare enum CurveTypeArgument {
    secp256k1 = "Secp256k1",
    secp256r1 = "Secp256r1"
}
export declare const CurveTypeIndex: CurveTypeArgument[];
export declare enum NumIndex {
    index_0 = "0",
    index_1 = "1",
    index_2 = "2"
}
export declare const JS_CONFIG_FILENAME = "algob.config.js";
export declare const TS_CONFIG_FILENAME = "algob.config.ts";
export declare const NETWORK_DEFAULT = "default";
export {};

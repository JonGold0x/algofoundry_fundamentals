import algosdk, { EncodedSignedTransaction, SignedTransaction, SuggestedParams, Transaction } from "algosdk";
import { AlgoSigner, JsonPayload, WalletTransaction } from "../algo-signer-types";
import { ExecParams, TransactionAndSign, TxnReceipt, TxParams } from "../types";
export declare class WebMode {
    algoSigner: AlgoSigner;
    chainName: string;
    constructor(algoSigner: AlgoSigner, chainName: string);
    /**
     * wait for confirmation for transaction using transaction id
     * @param txId Transaction id
     * @param waitRounds number of rounds to wait for transaction to be confirmed - default is 10
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    waitForConfirmation(txId: string, waitRounds?: number): Promise<TxnReceipt>;
    /**
     * Send signed transaction to network and wait for confirmation
     * @param signedTxn Signed Transaction blob encoded in base64
     * @param waitRounds number of rounds to wait for transaction to be confirmed - default is 10
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    sendAndWait(signedTxn: string, waitRounds?: number): Promise<TxnReceipt>;
    /**
     * Send group transaction to network
     * @param signedTxs signed transaction group
     */
    sendGroupTransaction(signedTxs: any): Promise<JsonPayload>;
    /**
     * Sign transaction using algosigner
     * @param txns Array of transactions in base64
     */
    signTransaction(txns: WalletTransaction[]): Promise<JsonPayload>;
    /**
     * Returns suggested transaction parameters using algosigner
     * @param userParams Transaction parameters
     */
    getSuggestedParams(userParams: TxParams): Promise<SuggestedParams>;
    /**
     * Appends signature to a multisig transaction using algosigner
     * @param txn Multisignature Encoded Transaction
     * @param signers a subset of addresses to sign the transaction
     * return an object containing a blob key encoded in base64
     */
    signMsigTx(txn: EncodedSignedTransaction, signers?: string[]): Promise<JsonPayload>;
    /**
     * @description Sign a Logic Signature transaction
     * @param transaction algosdk.Transaction object
     * @param logicSig Logic Sig Account
     * @returns Returns txID and blob object
     * for more info: https://developer.algorand.org/docs/get-details/dapps/smart-contracts/smartsigs/modes/#contract-account
     */
    signLogicSigTx(transaction: Transaction, logicSig: algosdk.LogicSigAccount): {
        txID: string;
        blob: Uint8Array;
    };
    /**
     * Execute single transaction or group of transactions (atomic transaction)
     * Check out {@link https://algobuilder.dev/guide/execute-transaction.html#execute-transaction|execute-transaction}
     * for more info.
     * @param transactions transaction parameters, atomic transaction parameters
     * or TransactionAndSign object(SDK transaction object and signer parameters).
     * When list of ExecParams is used, the function will request wallet to sign transactions.
     */
    executeTx(transactions: ExecParams[] | TransactionAndSign[]): Promise<TxnReceipt>;
    /**
     * Creates an algosdk.Transaction object based on execParams and suggestedParams
     * @param execParams execParams containing all txn info
     * @param txParams suggestedParams object
     * @returns array of algosdk.Transaction objects
     */
    makeTx(execParams: ExecParams[], txParams: algosdk.SuggestedParams): Transaction[];
    /**
     * Signs a Transaction object
     * @param transaction transaction object.
     * @returns SignedTransaction
     */
    signTx(transaction: algosdk.Transaction): Promise<SignedTransaction>;
    /**
     * Creates an algosdk.Transaction object based on execParams and suggestedParams
     * and signs it
     * @param execParams execParams containing all txn info
     * @param txParams suggestedParams object
     * @returns array of algosdk.SignedTransaction objects
     */
    makeAndSignTx(execParams: ExecParams[], txParams: algosdk.SuggestedParams): Promise<SignedTransaction[]>;
    /**
     * Sends signedTransaction and waits for the response
     * @param transactions array of signedTransaction objects.
     * @param rounds number of rounds to wait for response
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    sendTxAndWait(transactions: SignedTransaction[], rounds?: number): Promise<TxnReceipt>;
}

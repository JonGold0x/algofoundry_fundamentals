import algosdk, { EncodedSignedTransaction, MultisigMetadata, SuggestedParams, Transaction } from "algosdk";
import { types } from "..";
import { AccountAddress, AssetModFields, ExecParams, TxParams } from "../types";
/**
 * Encodes note to bytes
 * When `note` is provided then uses the TexEncoder to convert note to bytes.
 * When `noteb64` is provided then uses base64 decoder to convert base64 text to bytes.
 * Throws an error if both `note` and `noteb64` are provided.
 * */
export declare function encodeNote(note: string | Uint8Array | undefined, noteb64: string | undefined): Uint8Array | undefined;
export declare function decodeText(bytes: Uint8Array | undefined): string | undefined;
/**
 * Returns from address from the transaction params depending on @SignType
 * @param execParams transaction execution params passed by user
 */
export declare function getFromAddress(execParams: ExecParams): AccountAddress;
/**
 * Returns revocation targer address from the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxRevokeAddress(transaction: Transaction): AccountAddress;
/**
 * Returns from address from the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxFromAddress(transaction: Transaction): AccountAddress;
export declare function getAddress(account: algosdk.Address | undefined): AccountAddress | undefined;
/**
 * Returns to address from the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxToAddress(transaction: Transaction): AccountAddress;
/**
 * Returns to address from the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxCloseReminderToAddress(transaction: Transaction): AccountAddress | undefined;
/**
 * Returns  reKeyTo address of the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxReKeyToToAddress(transaction: Transaction): AccountAddress | undefined;
/**
 * Returns freeze target address of the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxFreezeAddress(transaction: Transaction): AccountAddress;
/**
 * Returns ASA definiton
 * @param transaction Transaction Object
 */
export declare function getTxASADefinition(transaction: Transaction): types.ASADef;
/**
 * Returns to address from the Transaction object
 * @param transaction Transaction Object
 */
export declare function getTxFlags(transaction: Transaction): types.TxParams;
/**
 * Using flatFee, if flatFee is true, set totalFee
 * https://developer.algorand.org/tutorials/setting-transaction-fee-javascript/
 * @param params Transaction parameters
 * @param tx SDK Transaction object
 */
export declare function updateTxFee(params: TxParams, tx: Transaction): Transaction;
/**
 * Converts ExecParams to Algo SDK Transaction.
 * ExecParams is a type safe and more friendly way to create Algorand transactions.
 *  + AlgoTransferParam used for transferring algo
 *  + AssetTransferParam used for transferring asset
 *  + ModifyAssetParam used to modify asset mutable properties
 *  + FreezeAssetParam used to freeze asset (only permitted by asa freeze account)
 *  + RevokeAssetParam used to revoke assets (by asset clawback)
 *  + DestroyAssetParam used to delete asset (by asset manager)
 *  + Deploy Params - deploy ASA, deploy App
 *  + OptIn Params - optInToASA, optInToApp
 *  + AppCallsParam (NoOp, Clear, Delete..)used for calling stateful smart contracts.
 For more advanced use-cases, please use `algosdk.tx` directly.
 NOTE: parseAppArgs is used to handle case when user passes appArgs similar to goal
 * @param execParams ExecParams
 * @param suggestedParams blockchain transaction suggested parameters (firstRound, lastRound, fee..)
 * @returns SDK Transaction object
 */
export declare function mkTransaction(execParams: ExecParams, suggestedParams: SuggestedParams): Transaction;
/**
 * Returns the fields necessary for an Asset Modification
 * @param transaction Transaction Object
 */
export declare function getAssetReconfigureFields(transaction: Transaction): AssetModFields;
/**
 * A function to construct a Multisig Encoded Transaction object, which is ready to be signed (internally
 * using the Algorand SDK or a wallet)
 **/
export declare function mkMultisigEncodedTx(mparams: MultisigMetadata, tx: Transaction): EncodedSignedTransaction;

import type { Accounts, Address, AlgorandTxn, Base64, ConnectionSettings, EncodedTransaction, SignedTx, SignTransactionOptions } from "@randlabs/myalgo-connect";
import algosdk, { SignedTransaction, Transaction } from "algosdk";
import { ExecParams, HttpNetworkConfig, TransactionInGroup, TxnReceipt } from "../types";
interface MyAlgoConnect {
    /**
     * @async
     * @description Receives user's accounts from MyAlgo.
     * @param {ConnectionSettings} [settings] Connection settings
     * @returns Returns an array of Algorand addresses.
     */
    connect(settings?: ConnectionSettings): Promise<Accounts[]>;
    /**
     * @async
     * @description Sign an Algorand Transaction.
     * @param transaction Expect a valid Algorand transaction
     * @param signOptions Sign transactions options object.
     * @returns Returns signed transaction
     */
    signTransaction(transaction: AlgorandTxn | EncodedTransaction, signOptions?: SignTransactionOptions): Promise<SignedTx>;
    /**
     * @async
     * @description Sign an Algorand Transaction.
     * @param transaction Expect a valid Algorand transaction array.
     * @param signOptions Sign transactions options object.
     * @returns Returns signed an array of signed transactions.
     */
    signTransaction(transaction: (AlgorandTxn | EncodedTransaction)[], signOptions?: SignTransactionOptions): Promise<SignedTx[]>;
    /**
     * @async
     * @description Sign a teal program
     * @param logic Teal program
     * @param address Signer Address
     * @returns Returns signed teal
     */
    signLogicSig(logic: Uint8Array | Base64, address: Address): Promise<Uint8Array>;
}
export declare class MyAlgoWalletSession {
    connector: MyAlgoConnect;
    private readonly algodClient;
    accounts: Accounts[];
    addresses: Address[];
    constructor(walletURL: HttpNetworkConfig, connector?: MyAlgoConnect);
    /**
     * @async
     * @description Signs a teal program (https://algorand.github.io/js-algorand-sdk/modules.html#tealSign)
     * @param logic Teal program
     * @param address Signer Address
     * @returns Returns signed teal
     * for more info: https://connect.myalgo.com/docs/interactive-examples/TealSign
     * https://developer.algorand.org/docs/get-details/dapps/smart-contracts/smartsigs/modes/#delegated-approval
     */
    signLogic(logic: string | Uint8Array, address: string): Promise<Uint8Array>;
    /**
     * @description Takes a transaction and a LogicSig object and returns an encoded signed transaction.
     * @param transaction algosdk.Transaction object
     * @param logicSig Logic Sig Account
     * @returns Returns txID and blob object
     * for more info: https://developer.algorand.org/docs/get-details/dapps/smart-contracts/smartsigs/modes/#contract-account
     */
    signLogicSigTx(transaction: Transaction, logicSig: algosdk.LogicSigAccount): {
        txID: string;
        blob: Uint8Array;
    };
    /**
     * @async
     * @description Connects to the MyAlgo Wallet by opening up its dialog box to login
     * @param allowMultipleAccounts allow selection of multiple accounts from MyAlgo Wallet, default is true
     * For Multisig you need to allow multiple accounts login
     * for more info visit: https://connect.myalgo.com/docs/interactive-examples/Connect
     */
    connectToMyAlgo(allowMultipleAccounts?: boolean): Promise<void>;
    /**
     * https://connect.myalgo.com/docs/interactive-examples/PaymentTransaction
     * Sign a single transaction from a my algo wallet session
     * @param txn { SDK transaction object, shouldSign, signers, msig } object
     * @returns raw signed txn
     */
    signTransaction(txn: algosdk.Transaction, signOptions?: SignTransactionOptions): Promise<SignedTx>;
    /**
     * https://connect.myalgo.com/docs/interactive-examples/GroupedTransaction
     * Sign a group of transaction(s) from a my algo wallet session
     * @param txns { SDK transaction object, shouldSign, signers, msig } object
     * @returns array of raw signed txns | null. null representes that the txn in array is NOT signed
     * by wallet user (i.e signable by someone else).
     */
    signTransactionGroup(txns: TransactionInGroup[], signOptions?: SignTransactionOptions): Promise<SignedTx[]>;
    /**
     * Send signed transaction to network and wait for confirmation
     * @param rawTxns Signed Transaction(s)
     * @param waitRounds number of rounds to wait for transaction to be confirmed - default is 10
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    sendAndWait(rawTxns: Uint8Array | Uint8Array[], waitRounds?: number): Promise<TxnReceipt>;
    /**
     * Function used to wait for a tx confirmation
     * @param txId txn ID for which confirmation is required
     * @param waitRounds number of rounds to wait for transaction to be confirmed - default is 10
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    waitForConfirmation(txId: string, waitRounds?: number): Promise<TxnReceipt>;
    /**
     * Execute single transaction or group of transactions (atomic transaction)
     * @param execParams transaction parameters or atomic transaction parameters
     */
    executeTx(execParams: ExecParams[]): Promise<TxnReceipt>;
    /**
     * Creates an algosdk.Transaction object based on execParams and suggestedParams
     * @param execParams execParams containing all txn info
     * @param txParams suggestedParams object
     * @returns array of algosdk.Transaction objects
     */
    makeTx(execParams: ExecParams[], txParams: algosdk.SuggestedParams): Transaction[];
    /**
     * Signs a Transaction object with with myAlgoWallet
     * @param transaction transaction object.
     * @returns SignedTransaction
     */
    signTx(transaction: algosdk.Transaction): Promise<SignedTransaction>;
    /**
     * Creates an algosdk.Transaction object based on execParams and suggestedParams
     * and signs with myAlgoWallet
     * @param execParams execParams containing all txn info
     * @param txParams suggestedParams object
     * @returns array of algosdk.SignedTransaction objects
     */
    makeAndSignTx(execParams: ExecParams[], txParams: algosdk.SuggestedParams): Promise<SignedTransaction[]>;
    /**
     * Sends signedTransaction and waits for the response
     * @param transactions array of signedTransaction objects.
     * @param rounds number of rounds to wait for response
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    sendTxAndWait(transactions: SignedTransaction[], rounds?: number): Promise<TxnReceipt>;
}
export {};

import WalletConnect from "@walletconnect/client";
import algosdk, { SignedTransaction, Transaction } from "algosdk";
import { ExecParams, HttpNetworkConfig, SessionConnectResponse, SessionDisconnectResponse, SessionUpdateResponse, TransactionAndSign, TransactionInGroup, TxnReceipt } from "../types";
export declare class WallectConnectSession {
    readonly connector: WalletConnect;
    private readonly algodClient;
    wcAccounts: string[];
    constructor(walletURL: HttpNetworkConfig, connector?: WalletConnect);
    /**
     * Create new session
     * @param force if true, kills an existing session and creates new one.
     * By default force is false
     */
    create(force?: boolean): Promise<void>;
    /**
     * Close Connection
     */
    close(): Promise<void>;
    /**
     * On connect subscription event
     * @param handler handler callback
     */
    onConnect(handler: (error: Error | null, response: SessionConnectResponse) => unknown): void;
    /**
     * onUpdate subscription event
     * @param handler handler callback
     */
    onUpdate(handler: (error: Error | null, response: SessionUpdateResponse) => unknown): void;
    /**
     * onDisconnect subscription event
     * @param handler handler callback
     */
    onDisconnect(handler: (error: Error | null, payload: SessionDisconnectResponse) => unknown): void;
    /**
     * Sign a single transaction from a wallect connect session
     * @param txn { SDK transaction object, shouldSign, signers, msig } object
     * @param message optional message with txn
     * @returns raw signed txn
     */
    signTransaction(txn: algosdk.Transaction, message?: string): Promise<Uint8Array>;
    /**
     * @description Signs a Logic Signature transaction
     * @param transaction algosdk.Transaction object
     * @param logicSig Logic Sig Account
     * @returns Returns txID and blob object
     * for more info: https://developer.algorand.org/docs/get-details/dapps/smart-contracts/smartsigs/modes/#contract-account
     */
    signLogicSigTx(transaction: Transaction, logicSig: algosdk.LogicSigAccount): {
        txID: string;
        blob: Uint8Array;
    };
    /**
     * Sign a group of transaction(s) from a wallect connect session
     * @param txns Array of [{  SDK transaction object, shouldSign, signers, msig }] object
     * @param message optional message with txn
     * @returns array of raw signed txns | null. null representes that the txn in array is NOT signed
     * by wallet user (i.e signable by someone else).
     * TODO: handle case of multiple signers in group transaction
     */
    signTransactionGroup(txns: TransactionInGroup[], message?: string): Promise<Array<Uint8Array | null>>;
    /**
     * Send signed transaction to network and wait for confirmation
     * @param rawTxns Signed Transaction(s)
     * @param waitRounds number of rounds to wait for transaction to be confirmed - default is 10
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    sendAndWait(rawTxns: Uint8Array | Uint8Array[], waitRounds?: number): Promise<TxnReceipt>;
    /**
     * Function used to wait for a tx confirmation
     * @param txId txn ID for which confirmation is required
     * @param waitRounds number of rounds to wait for transaction to be confirmed - default is 10
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    waitForConfirmation(txId: string, waitRounds?: number): Promise<TxnReceipt>;
    /**
     * Execute single transaction or group of transactions (atomic transaction)
     * @param transactions transaction parameters,  atomic transaction parameters
     *  or TransactionAndSign object(SDK transaction object and signer parameters)
     */
    executeTx(transactions: ExecParams[] | TransactionAndSign[]): Promise<TxnReceipt>;
    /**
     * Creates an algosdk.Transaction object based on execParams and suggestedParams
     * @param execParams execParams containing all txn info
     * @param txParams suggestedParams object
     * @returns array of algosdk.Transaction objects
     */
    makeTx(execParams: ExecParams[], txParams: algosdk.SuggestedParams): Transaction[];
    /**
     * Signes a Transaction object using walletconnect
     * @param transaction transaction object.
     * @returns SignedTransaction
     */
    signTx(transaction: algosdk.Transaction): Promise<SignedTransaction>;
    /**
     * Creates an algosdk.Transaction object based on execParams and suggestedParams
     * and signs it using walletconnect
     * @param execParams execParams containing all txn info
     * @param txParams suggestedParams object
     * @returns array of algosdk.SignedTransaction objects
     */
    makeAndSignTx(execParams: ExecParams[], txParams: algosdk.SuggestedParams): Promise<SignedTransaction[]>;
    /**
     * Sends signedTransaction and waits for the response
     * @param transactions array of signedTransaction objects.
     * @param rounds number of rounds to wait for response
     * @returns TxnReceipt which includes confirmed txn response along with txID
     */
    sendTxAndWait(transactions: SignedTransaction[], rounds?: number): Promise<TxnReceipt>;
}
